{"version":3,"sources":["components/Header.js","components/TodoForm.js","components/TodoRow.js","components/TodoTable.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","TodoForm","state","text","handleSubmit","event","preventDefault","length","props","onSubmit","id","shortid","generate","name","complete","setState","handleChange","target","value","this","TextField","label","margin","style","width","onChange","React","Component","TableRow","TableCell","todo","textDecoration","Checkbox","checked","onComplete","onClick","onDelete","fontSize","Table","maxWidth","TableHead","TableBody","todos","map","TodoRow","key","TodoList","addTodo","localStorage","setItem","JSON","stringify","deleteTodo","filter","completeTodo","cachedTodos","parse","getItem","todosLeft","reduce","acc","cur","TodoTable","App","Header","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0614bd8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          TodoList\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport shortid from \"shortid\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.text.length > 0) {\r\n      this.props.onSubmit({\r\n        id: shortid.generate(),\r\n        name: this.state.text,\r\n        complete: false,\r\n      });\r\n      this.setState({\r\n        text: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <TextField\r\n          label=\"Add a todo...\"\r\n          margin=\"normal\"\r\n          style={{ width: \"100%\" }}\r\n          name=\"text\"\r\n          onChange={this.handleChange}\r\n          value={this.state.text}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { TableCell, TableRow, IconButton } from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nexport default props => {\r\n  const handleChange = () => {\r\n    props.onComplete(props.todo.id);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    props.onDelete(props.todo.id);\r\n  };\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell\r\n        style={props.todo.complete ? { textDecoration: \"line-through\" } : {}}\r\n      >\r\n        {props.todo.name}\r\n      </TableCell>\r\n      <TableCell>\r\n        <Checkbox checked={props.todo.complete} onChange={handleChange} />\r\n      </TableCell>\r\n      <TableCell>\r\n        <IconButton aria-label=\"delete\" onClick={handleDelete}>\r\n          <DeleteIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport TodoRow from \"./TodoRow\";\r\n\r\nexport default props => (\r\n  <Table style={{ maxWidth: 1000 }}>\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell>Name</TableCell>\r\n        <TableCell style={{ width: 20 }}></TableCell>\r\n        <TableCell style={{ width: 20 }}></TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n    <TableBody>\r\n      {props.todos.map(todo => (\r\n        <TodoRow\r\n          key={todo.id}\r\n          todo={todo}\r\n          onComplete={props.onComplete}\r\n          onDelete={props.onDelete}\r\n        />\r\n      ))}\r\n    </TableBody>\r\n  </Table>\r\n);\r\n","import React from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport TodoTable from \"./TodoTable\";\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    todos: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const cachedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n\r\n    if (cachedTodos) {\r\n      this.setState({ todos: cachedTodos });\r\n    }\r\n  }\r\n\r\n  addTodo = ({ id, name, complete }) => {\r\n    this.setState(\r\n      {\r\n        todos: [{ id, name, complete }, ...this.state.todos],\r\n      },\r\n      () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n      }\r\n    );\r\n  };\r\n\r\n  deleteTodo = id => {\r\n    this.setState(\r\n      { todos: this.state.todos.filter(todo => todo.id !== id) },\r\n      () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n      }\r\n    );\r\n  };\r\n\r\n  completeTodo = id => {\r\n    this.setState(\r\n      state => ({\r\n        todos: state.todos.map(todo => {\r\n          if (todo.id === id) {\r\n            return {\r\n              ...todo,\r\n              complete: !todo.complete,\r\n            };\r\n          } else {\r\n            return todo;\r\n          }\r\n        }),\r\n      }),\r\n      () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const todosLeft = this.state.todos.reduce((acc, cur) => {\r\n      return cur.complete ? acc : acc + 1;\r\n    }, 0);\r\n\r\n    return (\r\n      <div>\r\n        <TodoForm onSubmit={this.addTodo} />\r\n        <TodoTable\r\n          todos={this.state.todos}\r\n          onComplete={this.completeTodo}\r\n          onDelete={this.deleteTodo}\r\n        />\r\n        <p>Todos left : {todosLeft}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Container maxWidth=\"sm\">\r\n        <div className=\"container\">\r\n          <TodoList />\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
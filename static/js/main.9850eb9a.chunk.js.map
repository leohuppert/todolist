{"version":3,"sources":["components/Header.js","components/TodoForm.js","components/TodoRow.js","components/TodoTable.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","TodoForm","state","text","handleSubmit","event","preventDefault","length","props","onSubmit","id","shortid","generate","name","complete","setState","handleChange","target","value","this","TextField","label","margin","style","width","onChange","React","Component","todo","onComplete","onDelete","TableRow","TableCell","textDecoration","transition","Checkbox","checked","onClick","fontSize","todos","Table","maxWidth","TableHead","TableBody","map","TodoRow","key","TodoList","addTodo","localStorage","setItem","JSON","stringify","deleteTodo","filter","completeTodo","cachedTodos","parse","getItem","todosLeft","reduce","acc","cur","TodoTable","App","Header","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9850eb9a.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          TodoList\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport shortid from \"shortid\";\n\nexport default class TodoForm extends React.Component {\n  state = {\n    text: \"\",\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.text.length > 0) {\n      this.props.onSubmit({\n        id: shortid.generate(),\n        name: this.state.text,\n        complete: false,\n      });\n      this.setState({\n        text: \"\",\n      });\n    }\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <TextField\n          label=\"Add a todo...\"\n          margin=\"normal\"\n          style={{ width: \"100%\" }}\n          name=\"text\"\n          onChange={this.handleChange}\n          value={this.state.text}\n        />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport { TableCell, TableRow, IconButton } from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nexport default ({ todo, onComplete, onDelete }) => {\n  const handleChange = () => {\n    onComplete(todo.id);\n  };\n\n  const handleDelete = () => {\n    onDelete(todo.id);\n  };\n\n  const completeStyle = {\n    textDecoration: \"line-through\",\n    color: \"grey\",\n    transition: \"text-decoration 2s\",\n  };\n\n  return (\n    <TableRow>\n      <TableCell style={todo.complete ? completeStyle : {}}>\n        {todo.name}\n      </TableCell>\n      <TableCell>\n        <Checkbox checked={todo.complete} onChange={handleChange} />\n      </TableCell>\n      <TableCell>\n        <IconButton aria-label=\"delete\" onClick={handleDelete}>\n          <DeleteIcon fontSize=\"small\" />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React from \"react\";\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@material-ui/core\";\nimport TodoRow from \"./TodoRow\";\n\nexport default ({ todos, onComplete, onDelete }) => (\n  <Table style={{ maxWidth: 1000 }}>\n    <TableHead>\n      <TableRow>\n        <TableCell>Name</TableCell>\n        <TableCell style={{ width: 20 }}></TableCell>\n        <TableCell style={{ width: 20 }}></TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {todos.map(todo => (\n        <TodoRow\n          key={todo.id}\n          todo={todo}\n          onComplete={onComplete}\n          onDelete={onDelete}\n        />\n      ))}\n    </TableBody>\n  </Table>\n);\n","import React from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport TodoTable from \"./TodoTable\";\n\nexport default class TodoList extends React.Component {\n  state = {\n    todos: [],\n  };\n\n  componentDidMount() {\n    const cachedTodos = JSON.parse(localStorage.getItem(\"todos\"));\n\n    if (cachedTodos) {\n      this.setState({ todos: cachedTodos });\n    }\n  }\n\n  addTodo = ({ id, name, complete }) => {\n    this.setState(\n      {\n        todos: [{ id, name, complete }, ...this.state.todos],\n      },\n      () => {\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n      }\n    );\n  };\n\n  deleteTodo = id => {\n    this.setState(\n      { todos: this.state.todos.filter(todo => todo.id !== id) },\n      () => {\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n      }\n    );\n  };\n\n  completeTodo = id => {\n    this.setState(\n      state => ({\n        todos: state.todos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              complete: !todo.complete,\n            };\n          } else {\n            return todo;\n          }\n        }),\n      }),\n      () => {\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n      }\n    );\n  };\n\n  render() {\n    const todosLeft = this.state.todos.reduce((acc, cur) => {\n      return cur.complete ? acc : acc + 1;\n    }, 0);\n\n    return (\n      <div>\n        <TodoForm onSubmit={this.addTodo} />\n        <TodoTable\n          todos={this.state.todos}\n          onComplete={this.completeTodo}\n          onDelete={this.deleteTodo}\n        />\n        <p>Todos left : {todosLeft}</p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport TodoList from \"./components/TodoList\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Container maxWidth=\"sm\">\n        <TodoList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}